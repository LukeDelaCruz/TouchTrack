package com.example.lukepatrick.touchtrack2;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MainActivity extends AppCompatActivity {

    String serverIP;  // string that holds IP for user
    String serverPasswd; // string that holds that password generated by the server from the user
    Matcher matcher;
    EditText IPinput;
    EditText Codeinput;
    Button submit;  // "Go!" button

    // create the environment for the main page
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getSupportActionBar().setTitle("Network Configuration Mode");

        // give the instantiated objects their
        // values with respect to the environment
        IPinput = findViewById(R.id.IPinput);
        Codeinput = findViewById(R.id.submitPasswd);
        submit = findViewById(R.id.submit);
        submit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {  // we verify the user's entered IP
                serverIP = IPinput.getText().toString(); // convert user input to string
                serverPasswd = Codeinput.getText().toString();
                matcher = IP_ADDRESS.matcher(serverIP);
                if (matcher.matches()) {
                    showToast(serverIP + " Accepted!");
                    launchActivity();
                }
                else {
                    showToast("Please enter a valid IP address.");
                }
            }
        });
    }

    // simple function that displays messages or toasts oval strings
    private void showToast(String text) {
        Toast.makeText(MainActivity.this, text, Toast.LENGTH_SHORT).show();
    }

    // compiler that verifies IP address patterns based off a hardcoded template
    // like the formatting of an IP address
    public final Pattern IP_ADDRESS
            = Pattern.compile(
            "((25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(25[0-5]|2[0-4]"
                    + "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1]"
                    + "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
                    + "|[1-9][0-9]|[0-9]))");


    // initiates the controllingMode or "tracking mode" activity
    private void launchActivity() {
        Intent intent = new Intent(this, controllingMode.class);
        Bundle bundle = new Bundle();  // bundling collected object data
        bundle.putString("serverIP", serverIP);  // give the IP a key in the bundle for identification
        bundle.putString("serverPasswd", serverPasswd); // similarly we have to identify where in the bundle is the security code
        intent.putExtras(bundle);  // now put this bundle into the intent
        startActivity(intent);  // pass the server IP to the next activity
    }
}
